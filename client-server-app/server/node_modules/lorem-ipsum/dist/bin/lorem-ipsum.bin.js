#!/usr/bin/env node
"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _ = require("..");

var _cli = require("../constants/cli");

var _formats = require("../constants/formats");

var _regex = require("../constants/regex");

var _copyToClipboard = _interopRequireDefault(require("../util/copyToClipboard"));

var _getVersion = _interopRequireDefault(require("../util/getVersion"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander.default.version((0, _getVersion.default)()).usage(_cli.USAGE).command("[count] [units]", _cli.DESCRIPTION).option("-c --copy", "Copy").option("-f --format <format>", "Format", _regex.REGEX.FORMATS, _formats.FORMAT_PLAIN).action(function () {
  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "1";
  var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "sentence";

  if (_regex.REGEX.UNITS.test(units) === false) {
    // tslint:disable-next-line:no-console
    console.error("".concat(units, " is not valid. Choose from paragraph(s), sentence(s), or word(s)."));
    process.exit(1);
  }

  var count = parseInt(num, 10);

  if (!count || count < 1) {
    // tslint:disable-next-line:no-console
    console.error("".concat(count, " is not valid. Choose a number greater than 1."));
    process.exit(1);
  }

  var output = (0, _.loremIpsum)({
    count: count,
    format: _commander.default.format,
    units: units
  }); // tslint:disable-next-line:no-console

  console.log(output);

  if (_commander.default.copy === true) {
    (0, _copyToClipboard.default)(output).then(function () {
      // tslint:disable-next-line:no-console
      console.log(""); // tslint:disable-next-line:no-console

      console.log("âœ“ copied");
    }).catch(function (err) {
      // tslint:disable-next-line:no-console
      console.log(err.message);
    });
  }
});

_commander.default.parse(process.argv);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vbG9yZW0taXBzdW0uYmluLnRzIl0sIm5hbWVzIjpbInByb2dyYW0iLCJ2ZXJzaW9uIiwidXNhZ2UiLCJVU0FHRSIsImNvbW1hbmQiLCJERVNDUklQVElPTiIsIm9wdGlvbiIsIlJFR0VYIiwiRk9STUFUUyIsIkZPUk1BVF9QTEFJTiIsImFjdGlvbiIsIm51bSIsInVuaXRzIiwiVU5JVFMiLCJ0ZXN0IiwiY29uc29sZSIsImVycm9yIiwicHJvY2VzcyIsImV4aXQiLCJjb3VudCIsInBhcnNlSW50Iiwib3V0cHV0IiwiZm9ybWF0IiwibG9nIiwiY29weSIsInRoZW4iLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJwYXJzZSIsImFyZ3YiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQUEsbUJBQ0dDLE9BREgsQ0FDVywwQkFEWCxFQUVHQyxLQUZILENBRVNDLFVBRlQsRUFHR0MsT0FISCxvQkFHOEJDLGdCQUg5QixFQUlHQyxNQUpILENBSVUsV0FKVixFQUl1QixNQUp2QixFQUtHQSxNQUxILENBS1Usc0JBTFYsRUFLa0MsUUFMbEMsRUFLNENDLGFBQU1DLE9BTGxELEVBSzJEQyxxQkFMM0QsRUFNR0MsTUFOSCxDQU1VLFlBQW1EO0FBQUEsTUFBbERDLEdBQWtELHVFQUFwQyxHQUFvQztBQUFBLE1BQS9CQyxLQUErQix1RUFBZixVQUFlOztBQUN6RCxNQUFJTCxhQUFNTSxLQUFOLENBQVlDLElBQVosQ0FBaUJGLEtBQWpCLE1BQTRCLEtBQWhDLEVBQXVDO0FBQ3JDO0FBQ0FHLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixXQUNLSixLQURMO0FBR0FLLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRCxNQUFNQyxLQUFLLEdBQUdDLFFBQVEsQ0FBQ1QsR0FBRCxFQUFNLEVBQU4sQ0FBdEI7O0FBQ0EsTUFBSSxDQUFDUSxLQUFELElBQVVBLEtBQUssR0FBRyxDQUF0QixFQUF5QjtBQUN2QjtBQUNBSixJQUFBQSxPQUFPLENBQUNDLEtBQVIsV0FBaUJHLEtBQWpCO0FBQ0FGLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRCxNQUFNRyxNQUFNLEdBQUcsa0JBQVc7QUFDeEJGLElBQUFBLEtBQUssRUFBTEEsS0FEd0I7QUFFeEJHLElBQUFBLE1BQU0sRUFBRXRCLG1CQUFRc0IsTUFGUTtBQUd4QlYsSUFBQUEsS0FBSyxFQUFMQTtBQUh3QixHQUFYLENBQWYsQ0FoQnlELENBc0J6RDs7QUFDQUcsRUFBQUEsT0FBTyxDQUFDUSxHQUFSLENBQVlGLE1BQVo7O0FBRUEsTUFBSXJCLG1CQUFRd0IsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QixrQ0FBZ0JILE1BQWhCLEVBQ0dJLElBREgsQ0FDUSxZQUFNO0FBQ1Y7QUFDQVYsTUFBQUEsT0FBTyxDQUFDUSxHQUFSLENBQVksRUFBWixFQUZVLENBSVY7O0FBQ0FSLE1BQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZLFVBQVo7QUFDRCxLQVBILEVBUUdHLEtBUkgsQ0FRUyxVQUFDQyxHQUFELEVBQVM7QUFDZDtBQUNBWixNQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWUksR0FBRyxDQUFDQyxPQUFoQjtBQUNELEtBWEg7QUFZRDtBQUNGLENBN0NIOztBQStDQTVCLG1CQUFRNkIsS0FBUixDQUFjWixPQUFPLENBQUNhLElBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByb2dyYW0gZnJvbSBcImNvbW1hbmRlclwiO1xyXG5pbXBvcnQgeyBsb3JlbUlwc3VtIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IERFU0NSSVBUSU9OLCBVU0FHRSB9IGZyb20gXCIuLi9jb25zdGFudHMvY2xpXCI7XHJcbmltcG9ydCB7IEZPUk1BVF9QTEFJTiB9IGZyb20gXCIuLi9jb25zdGFudHMvZm9ybWF0c1wiO1xyXG5pbXBvcnQgeyBSRUdFWCB9IGZyb20gXCIuLi9jb25zdGFudHMvcmVnZXhcIjtcclxuaW1wb3J0IGNvcHlUb0NsaXBib2FyZCBmcm9tIFwiLi4vdXRpbC9jb3B5VG9DbGlwYm9hcmRcIjtcclxuaW1wb3J0IGdldFZlcnNpb24gZnJvbSBcIi4uL3V0aWwvZ2V0VmVyc2lvblwiO1xyXG5cclxucHJvZ3JhbVxyXG4gIC52ZXJzaW9uKGdldFZlcnNpb24oKSlcclxuICAudXNhZ2UoVVNBR0UpXHJcbiAgLmNvbW1hbmQoYFtjb3VudF0gW3VuaXRzXWAsIERFU0NSSVBUSU9OKVxyXG4gIC5vcHRpb24oXCItYyAtLWNvcHlcIiwgXCJDb3B5XCIpXHJcbiAgLm9wdGlvbihcIi1mIC0tZm9ybWF0IDxmb3JtYXQ+XCIsIFwiRm9ybWF0XCIsIFJFR0VYLkZPUk1BVFMsIEZPUk1BVF9QTEFJTilcclxuICAuYWN0aW9uKChudW06IHN0cmluZyA9IFwiMVwiLCB1bml0czogc3RyaW5nID0gXCJzZW50ZW5jZVwiKSA9PiB7XHJcbiAgICBpZiAoUkVHRVguVU5JVFMudGVzdCh1bml0cykgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgYCR7dW5pdHN9IGlzIG5vdCB2YWxpZC4gQ2hvb3NlIGZyb20gcGFyYWdyYXBoKHMpLCBzZW50ZW5jZShzKSwgb3Igd29yZChzKS5gLFxyXG4gICAgICApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY291bnQgPSBwYXJzZUludChudW0sIDEwKTtcclxuICAgIGlmICghY291bnQgfHwgY291bnQgPCAxKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y291bnR9IGlzIG5vdCB2YWxpZC4gQ2hvb3NlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLmApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0ID0gbG9yZW1JcHN1bSh7XHJcbiAgICAgIGNvdW50LFxyXG4gICAgICBmb3JtYXQ6IHByb2dyYW0uZm9ybWF0LFxyXG4gICAgICB1bml0cyxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLmxvZyhvdXRwdXQpO1xyXG5cclxuICAgIGlmIChwcm9ncmFtLmNvcHkgPT09IHRydWUpIHtcclxuICAgICAgY29weVRvQ2xpcGJvYXJkKG91dHB1dClcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJcIik7XHJcblxyXG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwi4pyTIGNvcGllZFwiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxucHJvZ3JhbS5wYXJzZShwcm9jZXNzLmFyZ3YpO1xyXG4iXX0=