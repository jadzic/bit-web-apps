"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _words = require("../constants/words");

var _util = require("../util");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Generator =
/*#__PURE__*/
function () {
  function Generator() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$sentencesPerPara = _ref.sentencesPerParagraph,
        sentencesPerParagraph = _ref$sentencesPerPara === void 0 ? {
      max: 7,
      min: 3
    } : _ref$sentencesPerPara,
        _ref$wordsPerSentence = _ref.wordsPerSentence,
        wordsPerSentence = _ref$wordsPerSentence === void 0 ? {
      max: 15,
      min: 5
    } : _ref$wordsPerSentence,
        random = _ref.random,
        seed = _ref.seed,
        _ref$words = _ref.words,
        words = _ref$words === void 0 ? _words.WORDS : _ref$words;

    _classCallCheck(this, Generator);

    _defineProperty(this, "sentencesPerParagraph", void 0);

    _defineProperty(this, "wordsPerSentence", void 0);

    _defineProperty(this, "random", void 0);

    _defineProperty(this, "words", void 0);

    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {
      throw new Error("Minimum number of sentences per paragraph (".concat(sentencesPerParagraph.min, ") cannot exceed maximum (").concat(sentencesPerParagraph.max, ")."));
    }

    if (wordsPerSentence.min > wordsPerSentence.max) {
      throw new Error("Minimum number of words per sentence (".concat(wordsPerSentence.min, ") cannot exceed maximum (").concat(wordsPerSentence.max, ")."));
    }

    this.sentencesPerParagraph = sentencesPerParagraph;
    this.words = words;
    this.wordsPerSentence = wordsPerSentence;

    if (random) {
      this.random = random;
    } else {
      this.random = Math.random;
    }
  }

  _createClass(Generator, [{
    key: "generateRandomInteger",
    value: function generateRandomInteger(min, max) {
      return Math.floor(this.random() * (max - min + 1) + min);
    }
  }, {
    key: "generateRandomWords",
    value: function generateRandomWords(num) {
      var _this = this;

      var _this$wordsPerSentenc = this.wordsPerSentence,
          min = _this$wordsPerSentenc.min,
          max = _this$wordsPerSentenc.max;
      var length = num || this.generateRandomInteger(min, max);
      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {
        return "".concat(_this.pluckRandomWord(), " ").concat(accumulator);
      }, "").trim();
    }
  }, {
    key: "generateRandomSentence",
    value: function generateRandomSentence(num) {
      return "".concat((0, _util.capitalize)(this.generateRandomWords(num)), ".");
    }
  }, {
    key: "generateRandomParagraph",
    value: function generateRandomParagraph(num) {
      var _this2 = this;

      var _this$sentencesPerPar = this.sentencesPerParagraph,
          min = _this$sentencesPerPar.min,
          max = _this$sentencesPerPar.max;
      var length = num || this.generateRandomInteger(min, max);
      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {
        return "".concat(_this2.generateRandomSentence(), " ").concat(accumulator);
      }, "").trim();
    }
  }, {
    key: "pluckRandomWord",
    value: function pluckRandomWord() {
      var min = 0;
      var max = this.words.length - 1;
      var index = this.generateRandomInteger(min, max);
      return this.words[index];
    }
  }]);

  return Generator;
}();

var _default = Generator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbIkdlbmVyYXRvciIsInNlbnRlbmNlc1BlclBhcmFncmFwaCIsIm1heCIsIm1pbiIsIndvcmRzUGVyU2VudGVuY2UiLCJyYW5kb20iLCJzZWVkIiwid29yZHMiLCJXT1JEUyIsIkVycm9yIiwiTWF0aCIsImZsb29yIiwibnVtIiwibGVuZ3RoIiwiZ2VuZXJhdGVSYW5kb21JbnRlZ2VyIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpbmRleCIsInBsdWNrUmFuZG9tV29yZCIsInRyaW0iLCJnZW5lcmF0ZVJhbmRvbVdvcmRzIiwiZ2VuZXJhdGVSYW5kb21TZW50ZW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7O0lBeUJNQSxTOzs7QUFNSix1QkFNMkI7QUFBQSxtRkFBSixFQUFJO0FBQUEscUNBTHpCQyxxQkFLeUI7QUFBQSxRQUx6QkEscUJBS3lCLHNDQUxEO0FBQUVDLE1BQUFBLEdBQUcsRUFBRSxDQUFQO0FBQVVDLE1BQUFBLEdBQUcsRUFBRTtBQUFmLEtBS0M7QUFBQSxxQ0FKekJDLGdCQUl5QjtBQUFBLFFBSnpCQSxnQkFJeUIsc0NBSk47QUFBRUYsTUFBQUEsR0FBRyxFQUFFLEVBQVA7QUFBV0MsTUFBQUEsR0FBRyxFQUFFO0FBQWhCLEtBSU07QUFBQSxRQUh6QkUsTUFHeUIsUUFIekJBLE1BR3lCO0FBQUEsUUFGekJDLElBRXlCLFFBRnpCQSxJQUV5QjtBQUFBLDBCQUR6QkMsS0FDeUI7QUFBQSxRQUR6QkEsS0FDeUIsMkJBRGpCQyxZQUNpQjs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDekIsUUFBSVAscUJBQXFCLENBQUNFLEdBQXRCLEdBQTRCRixxQkFBcUIsQ0FBQ0MsR0FBdEQsRUFBMkQ7QUFDekQsWUFBTSxJQUFJTyxLQUFKLHNEQUVGUixxQkFBcUIsQ0FBQ0UsR0FGcEIsc0NBR3dCRixxQkFBcUIsQ0FBQ0MsR0FIOUMsUUFBTjtBQUtEOztBQUVELFFBQUlFLGdCQUFnQixDQUFDRCxHQUFqQixHQUF1QkMsZ0JBQWdCLENBQUNGLEdBQTVDLEVBQWlEO0FBQy9DLFlBQU0sSUFBSU8sS0FBSixpREFFRkwsZ0JBQWdCLENBQUNELEdBRmYsc0NBR3dCQyxnQkFBZ0IsQ0FBQ0YsR0FIekMsUUFBTjtBQUtEOztBQUVELFNBQUtELHFCQUFMLEdBQTZCQSxxQkFBN0I7QUFDQSxTQUFLTSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLSCxnQkFBTCxHQUF3QkEsZ0JBQXhCOztBQUVBLFFBQUlDLE1BQUosRUFBWTtBQUNWLFdBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNELEtBRkQsTUFFTztBQUNMLFdBQUtBLE1BQUwsR0FBY0ssSUFBSSxDQUFDTCxNQUFuQjtBQUNEO0FBQ0Y7Ozs7MENBRTRCRixHLEVBQWFELEcsRUFBcUI7QUFDN0QsYUFBT1EsSUFBSSxDQUFDQyxLQUFMLENBQVcsS0FBS04sTUFBTCxNQUFpQkgsR0FBRyxHQUFHQyxHQUFOLEdBQVksQ0FBN0IsSUFBa0NBLEdBQTdDLENBQVA7QUFDRDs7O3dDQUUwQlMsRyxFQUFzQjtBQUFBOztBQUFBLGtDQUMxQixLQUFLUixnQkFEcUI7QUFBQSxVQUN2Q0QsR0FEdUMseUJBQ3ZDQSxHQUR1QztBQUFBLFVBQ2xDRCxHQURrQyx5QkFDbENBLEdBRGtDO0FBRS9DLFVBQU1XLE1BQU0sR0FBR0QsR0FBRyxJQUFJLEtBQUtFLHFCQUFMLENBQTJCWCxHQUEzQixFQUFnQ0QsR0FBaEMsQ0FBdEI7QUFDQSxhQUFPLDZCQUFrQlcsTUFBbEIsRUFDSkUsTUFESSxDQUNHLFVBQUNDLFdBQUQsRUFBc0JDLEtBQXRCLEVBQWdEO0FBQ3RELHlCQUFVLEtBQUksQ0FBQ0MsZUFBTCxFQUFWLGNBQW9DRixXQUFwQztBQUNELE9BSEksRUFHRixFQUhFLEVBSUpHLElBSkksRUFBUDtBQUtEOzs7MkNBRTZCUCxHLEVBQXNCO0FBQ2xELHVCQUFVLHNCQUFXLEtBQUtRLG1CQUFMLENBQXlCUixHQUF6QixDQUFYLENBQVY7QUFDRDs7OzRDQUU4QkEsRyxFQUFzQjtBQUFBOztBQUFBLGtDQUM5QixLQUFLWCxxQkFEeUI7QUFBQSxVQUMzQ0UsR0FEMkMseUJBQzNDQSxHQUQyQztBQUFBLFVBQ3RDRCxHQURzQyx5QkFDdENBLEdBRHNDO0FBRW5ELFVBQU1XLE1BQU0sR0FBR0QsR0FBRyxJQUFJLEtBQUtFLHFCQUFMLENBQTJCWCxHQUEzQixFQUFnQ0QsR0FBaEMsQ0FBdEI7QUFDQSxhQUFPLDZCQUFrQlcsTUFBbEIsRUFDSkUsTUFESSxDQUNHLFVBQUNDLFdBQUQsRUFBc0JDLEtBQXRCLEVBQWdEO0FBQ3RELHlCQUFVLE1BQUksQ0FBQ0ksc0JBQUwsRUFBVixjQUEyQ0wsV0FBM0M7QUFDRCxPQUhJLEVBR0YsRUFIRSxFQUlKRyxJQUpJLEVBQVA7QUFLRDs7O3NDQUVnQztBQUMvQixVQUFNaEIsR0FBRyxHQUFHLENBQVo7QUFDQSxVQUFNRCxHQUFHLEdBQUcsS0FBS0ssS0FBTCxDQUFXTSxNQUFYLEdBQW9CLENBQWhDO0FBQ0EsVUFBTUksS0FBSyxHQUFHLEtBQUtILHFCQUFMLENBQTJCWCxHQUEzQixFQUFnQ0QsR0FBaEMsQ0FBZDtBQUNBLGFBQU8sS0FBS0ssS0FBTCxDQUFXVSxLQUFYLENBQVA7QUFDRDs7Ozs7O2VBR1lqQixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV09SRFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3dvcmRzXCI7XHJcbmltcG9ydCB7IGNhcGl0YWxpemUsIG1ha2VBcnJheU9mTGVuZ3RoIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kcyB7XHJcbiAgbWluOiBudW1iZXI7XHJcbiAgbWF4OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIElQcm5nID0gKCkgPT4gbnVtYmVyO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU2VlZFJhbmRvbSB7XHJcbiAgbmV3IChzZWVkPzogc3RyaW5nKTogSVBybmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1hdGgge1xyXG4gIHNlZWRyYW5kb206IElTZWVkUmFuZG9tO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHZW5lcmF0b3JPcHRpb25zIHtcclxuICBzZW50ZW5jZXNQZXJQYXJhZ3JhcGg/OiBJQm91bmRzO1xyXG4gIHdvcmRzUGVyU2VudGVuY2U/OiBJQm91bmRzO1xyXG4gIHJhbmRvbT86IElQcm5nO1xyXG4gIHNlZWQ/OiBzdHJpbmc7XHJcbiAgd29yZHM/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuY2xhc3MgR2VuZXJhdG9yIHtcclxuICBwdWJsaWMgc2VudGVuY2VzUGVyUGFyYWdyYXBoOiBJQm91bmRzO1xyXG4gIHB1YmxpYyB3b3Jkc1BlclNlbnRlbmNlOiBJQm91bmRzO1xyXG4gIHB1YmxpYyByYW5kb206IElQcm5nO1xyXG4gIHB1YmxpYyB3b3Jkczogc3RyaW5nW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHtcclxuICAgIHNlbnRlbmNlc1BlclBhcmFncmFwaCA9IHsgbWF4OiA3LCBtaW46IDMgfSxcclxuICAgIHdvcmRzUGVyU2VudGVuY2UgPSB7IG1heDogMTUsIG1pbjogNSB9LFxyXG4gICAgcmFuZG9tLFxyXG4gICAgc2VlZCxcclxuICAgIHdvcmRzID0gV09SRFMsXHJcbiAgfTogSUdlbmVyYXRvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgaWYgKHNlbnRlbmNlc1BlclBhcmFncmFwaC5taW4gPiBzZW50ZW5jZXNQZXJQYXJhZ3JhcGgubWF4KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBgTWluaW11bSBudW1iZXIgb2Ygc2VudGVuY2VzIHBlciBwYXJhZ3JhcGggKCR7XHJcbiAgICAgICAgICBzZW50ZW5jZXNQZXJQYXJhZ3JhcGgubWluXHJcbiAgICAgICAgfSkgY2Fubm90IGV4Y2VlZCBtYXhpbXVtICgke3NlbnRlbmNlc1BlclBhcmFncmFwaC5tYXh9KS5gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh3b3Jkc1BlclNlbnRlbmNlLm1pbiA+IHdvcmRzUGVyU2VudGVuY2UubWF4KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBgTWluaW11bSBudW1iZXIgb2Ygd29yZHMgcGVyIHNlbnRlbmNlICgke1xyXG4gICAgICAgICAgd29yZHNQZXJTZW50ZW5jZS5taW5cclxuICAgICAgICB9KSBjYW5ub3QgZXhjZWVkIG1heGltdW0gKCR7d29yZHNQZXJTZW50ZW5jZS5tYXh9KS5gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2VudGVuY2VzUGVyUGFyYWdyYXBoID0gc2VudGVuY2VzUGVyUGFyYWdyYXBoO1xyXG4gICAgdGhpcy53b3JkcyA9IHdvcmRzO1xyXG4gICAgdGhpcy53b3Jkc1BlclNlbnRlbmNlID0gd29yZHNQZXJTZW50ZW5jZTtcclxuXHJcbiAgICBpZiAocmFuZG9tKSB7XHJcbiAgICAgIHRoaXMucmFuZG9tID0gcmFuZG9tO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yYW5kb20gPSBNYXRoLnJhbmRvbTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZW5lcmF0ZVJhbmRvbUludGVnZXIobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdlbmVyYXRlUmFuZG9tV29yZHMobnVtPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMud29yZHNQZXJTZW50ZW5jZTtcclxuICAgIGNvbnN0IGxlbmd0aCA9IG51bSB8fCB0aGlzLmdlbmVyYXRlUmFuZG9tSW50ZWdlcihtaW4sIG1heCk7XHJcbiAgICByZXR1cm4gbWFrZUFycmF5T2ZMZW5ndGgobGVuZ3RoKVxyXG4gICAgICAucmVkdWNlKChhY2N1bXVsYXRvcjogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5wbHVja1JhbmRvbVdvcmQoKX0gJHthY2N1bXVsYXRvcn1gO1xyXG4gICAgICB9LCBcIlwiKVxyXG4gICAgICAudHJpbSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdlbmVyYXRlUmFuZG9tU2VudGVuY2UobnVtPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHtjYXBpdGFsaXplKHRoaXMuZ2VuZXJhdGVSYW5kb21Xb3JkcyhudW0pKX0uYDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZW5lcmF0ZVJhbmRvbVBhcmFncmFwaChudW0/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5zZW50ZW5jZXNQZXJQYXJhZ3JhcGg7XHJcbiAgICBjb25zdCBsZW5ndGggPSBudW0gfHwgdGhpcy5nZW5lcmF0ZVJhbmRvbUludGVnZXIobWluLCBtYXgpO1xyXG4gICAgcmV0dXJuIG1ha2VBcnJheU9mTGVuZ3RoKGxlbmd0aClcclxuICAgICAgLnJlZHVjZSgoYWNjdW11bGF0b3I6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2VuZXJhdGVSYW5kb21TZW50ZW5jZSgpfSAke2FjY3VtdWxhdG9yfWA7XHJcbiAgICAgIH0sIFwiXCIpXHJcbiAgICAgIC50cmltKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGx1Y2tSYW5kb21Xb3JkKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBtaW4gPSAwO1xyXG4gICAgY29uc3QgbWF4ID0gdGhpcy53b3Jkcy5sZW5ndGggLSAxO1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdlbmVyYXRlUmFuZG9tSW50ZWdlcihtaW4sIG1heCk7XHJcbiAgICByZXR1cm4gdGhpcy53b3Jkc1tpbmRleF07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHZW5lcmF0b3I7XHJcbiJdfQ==